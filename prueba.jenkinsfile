def genaralvars () {

    env.GIT_REPO = 'https://github.com/010278Francisco/Prueba.git'       
    env.GIT_BRANCH = 'main'         
    env.DOCKER_REPO = 'francisco012'
    CONTAINER_PORT= '83'

}

pipeline {
    agent any
    tools {
       terraform 'terraform-2'
    }
    stages {
        stage ("Set Variables") {
            steps {
                genaralvars()
            }
        }



 stage ("Verify If Infra exists") {
            steps {
                    script {
                        if (fileExists('terraform.tfstate')) {
                            withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'aws-francisco', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]){
                                sh "terraform destroy --auto-approve"
                               
                            }
                        }
                        else {
                            sh "echo no existe tfstate"
                        }
                }
            }
        }
        
        
        stage('terraform format check') {
            steps{
                sh 'terraform fmt'
            }
        }
        stage('terraform Init') {
            steps{
                sh 'terraform init'
            }
        }
        stage('terraform apply') {
            steps{
                withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'aws-francisco', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]){
                    sh 'terraform apply --auto-approve'
                    
                }
                script {
                    PUBLIC_IP_EC2 = sh (script: "terraform output instance_public_ip", returnStdout:true).trim()
                }
                echo "${PUBLIC_IP_EC2}"
            }
        }
        stage('Change inventory content') {
            steps{
                sh "echo $PUBLIC_IP_EC2 > mi-inventario.hosts"
            }
        }
        stage('Wait 1 minute') {
            steps {
                sleep time:1, unit: 'MINUTES'
            }
        }
        stage('Connect to Host and install Packages') {
            steps {
                ansiblePlaybook become: true, colorized: true, extras: '-v', disableHostKeyChecking: true, credentialsId: 'francisco-ssh-server01', installation: 'ansible210', inventory: 'mi-inventario.hosts', playbook: 'playbook-install-packages.yml'
            }
        }
        stage('Connect to Host and execute a command') {
            steps {
                ansiblePlaybook become: true, colorized: true, extras: '-v', disableHostKeyChecking: true, credentialsId: 'francisco-ssh-server01', installation: 'ansible210', inventory: 'mi-inventario.hosts', playbook: 'playbook-execute-command-packages.yml'
            }
        }
        stage('Connect to Host and install Docker') {
            steps {
                ansiblePlaybook become: true, colorized: true, extras: '-v', disableHostKeyChecking: true, credentialsId: 'francisco-ssh-server01', installation: 'ansible210', inventory: 'mi-inventario.hosts', playbook: 'playbook-install-docker.yml'
            }
        }
        stage('Create a Dockerfile') {
            steps {
                sh '''
                    cat <<EOT > Dockerfile
                    FROM nginx:latest
                '''
            }
        }
        stage('Build image') {
            steps {
                sh "docker build -t ${env.DOCKER_REPO}/${JOB_BASE_NAME}:${BUILD_NUMBER} ."
            }
        }
        stage('Publish image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker', passwordVariable: 'docker_pas', usernameVariable: 'docker_us')]) {
                    sh "docker login -u $docker_us -p $docker_pas"
                    sh "docker push ${env.DOCKER_REPO}/${JOB_BASE_NAME}:${BUILD_NUMBER}"
                }
            }
        }
        stage ('Pull image') {
            steps {
                ansiblePlaybook become: true, colorized: true, extras: '-v', disableHostKeyChecking: true, credentialsId: 'francisco-ssh-server01', installation: 'ansible210', inventory: 'mi-inventario.hosts', playbook: 'playbook-pull-image.yml', extraVars: [ var_job_name: "${JOB_BASE_NAME}", var_build_number: "${BUILD_NUMBER}", var_docker_repo: "${env.DOCKER_REPO}",  var_container_port: "${CONTAINER_PORT}",var_ip: "${PUBLIC_IP_EC2}" ]
            }
        }
        stage ('Run image') {
            steps {
                ansiblePlaybook become: true, colorized: true, extras: '-v', disableHostKeyChecking: true, credentialsId: 'francisco-ssh-server01', installation: 'ansible210', inventory: 'mi-inventario.hosts', playbook: 'playbook-run-image.yml', extraVars: [ var_job_name: "${JOB_BASE_NAME}", var_build_number: "${BUILD_NUMBER}", var_docker_repo: "${env.DOCKER_REPO}",  var_container_port: "${CONTAINER_PORT}",var_ip: "${PUBLIC_IP_EC2}" ]
            }
        }
        stage('Manual Approval to Destroy the Infra') {
            steps{
                input "Proceed with destroy the Infra?"
            }
        }
        stage('Executing Terraform Destroy') {
            steps{
                withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'chrisaws', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]){
                    sh 'terraform destroy --auto-approve'

                }
                
            }

        }
    }
}




